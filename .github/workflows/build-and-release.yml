name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ '*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Linting and type checking job
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run typecheck

  # Multi-platform build job
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: lint-and-typecheck
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run package
        
      - name: Package application (Linux/Windows)
        if: matrix.os != 'macos-latest'
        run: npm run make
        
      - name: Import Apple Certificate
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          
      - name: Setup Apple API Key
        if: matrix.os == 'macos-latest'
        run: |
          # Create the private_keys directory
          mkdir -p ~/private_keys
          
          # Write the API key to file with proper naming
          echo "${{ secrets.APPLE_API_KEY }}" > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          chmod 600 ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          
      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run make
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          # Enable code signing
          CSC_IDENTITY_AUTO_DISCOVERY: true
          
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dynaforge-linux
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.zip
          retention-days: 30
          
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dynaforge-macos
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip
          retention-days: 30
          
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dynaforge-windows
          path: |
            out/make/**/*.exe
            out/make/**/*.msi
            out/make/**/*.zip
          retention-days: 30

  # Release job - only runs on semver tags
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: dynaforge-linux
          path: ./artifacts/linux
          
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: dynaforge-macos
          path: ./artifacts/macos
          
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: dynaforge-windows
          path: ./artifacts/windows
          
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # Dynaforge v${{ steps.version.outputs.VERSION }}
          
          ## What's New
          
          This release includes the latest features and improvements for the Dynaforge DYNAMIXEL motor control application.
          
          ## Download Options
          
          ### Windows
          - **Installer**: Download the .exe file for easy installation
          - **MSI Package**: For enterprise deployment
          - **Portable**: Download the .zip file for portable usage
          
          ### macOS
          - **DMG**: Download the .dmg file for standard macOS installation
          - **Archive**: Download the .zip file for manual installation
          
          ### Linux
          - **Debian/Ubuntu**: Download the .deb package
          - **RedHat/Fedora**: Download the .rpm package
          - **AppImage**: Download the .zip containing the AppImage (if available)
          
          ## System Requirements
          
          - **Operating System**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)
          - **Hardware**: ROBOTIS U2D2 interface device for DYNAMIXEL motor control
          - **Network**: Internet connection for remote control features
          
          ## Installation Notes
          
          1. Download the appropriate package for your operating system
          2. Install or extract the application
          3. Connect your U2D2 device before launching
          4. Enable auto-connect in settings for seamless startup
          
          For detailed usage instructions, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          
          ## Support
          
          If you encounter any issues, please [create an issue](https://github.com/${{ github.repository }}/issues) on GitHub.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Dynaforge v${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}